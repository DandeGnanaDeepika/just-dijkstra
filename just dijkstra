import sys

class Graph:
    def __init__(self, vertices):
        self.V= vertices
        self.graph=[[0 for i in range(vertices)] for j in range(vertices)]
            
    
    def minimum(self,dist,visited):
        min= sys.maxsize
        for i in range(self.V):
            if(min>dist[i] and visited[i]==False):
                min=dist[i]
                min_ind=i
        return min_ind
            
    def dijkstra(self,src,dest):
        dist= [0]* self.V
        visited= [False]* self.V
        for i in range(self.V):
            dist[i]= sys.maxsize
            
        dist[src]=0
        
        for i in range(self.V):
            u=self.minimum(dist,visited)
            visited[u]= True
            
            for v in range(self.V):
                if(self.graph[u][v]>0 and visited[v]!=True and dist[v]>dist[u]+self.graph[u][v]):
                    dist[v]=dist[u]+self.graph[u][v]
            if(u==dest):
                break
        print(dest," ",dist[dest])

g = Graph(9) 
g.graph = [[0, 4, 0, 0, 0, 0, 0, 8, 0], 
        [4, 0, 8, 0, 0, 0, 0, 11, 0], 
        [0, 8, 0, 7, 0, 4, 0, 0, 2], 
        [0, 0, 7, 0, 9, 14, 0, 0, 0], 
        [0, 0, 0, 9, 0, 10, 0, 0, 0], 
        [0, 0, 4, 14, 10, 0, 2, 0, 0], 
        [0, 0, 0, 0, 0, 2, 0, 1, 6], 
        [8, 11, 0, 0, 0, 0, 1, 0, 7], 
        [0, 0, 2, 0, 0, 0, 6, 7, 0] 
        ]; 
  
g.dijkstra(0,5); 
  
            
